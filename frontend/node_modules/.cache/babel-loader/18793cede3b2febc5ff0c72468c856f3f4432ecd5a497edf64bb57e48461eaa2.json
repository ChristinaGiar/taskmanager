{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Modal from './Modal';\nimport classes from './Task.module.css';\n\n// hovered component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = _ref => {\n  _s();\n  let {\n    task,\n    index,\n    moveItem,\n    status,\n    deleteTask,\n    colXPositions\n  } = _ref;\n  const ref = useRef(null);\n  // console.log(colXPositions);\n  // dragged component\n  const [, drop] = useDrop({\n    accept: \"task\",\n    drop(item, monitor) {\n      let {\n        statusId,\n        icon,\n        statusTitle,\n        ...draggedtask\n      } = item; // TO DO destruct somehow status & task\n      // if (!ref.current) {\n      //     return\n      // }\n      // console.log(statusId, status.statusId);\n      // console.log(statusId1, icon, task);\n      const dragIndex = draggedtask.index;\n      const hoverIndex = index;\n      console.log(dragIndex, hoverIndex);\n      const hoverStatusId = status.statusId;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      // const hoverBoundingRect = ref.current?.getBoundingClientRect()\n      // // Get element vertical middle\n      // const hoverMiddleY =\n      //     (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // // Determine mouse position\n      // const clientOffset = monitor.getClientOffset()\n      // // Get pixels to the top of element\n      // const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // // Only perform the move when the mouse has crossed half of the items height\n      // // When dragging downwards, only move when the cursor is below 50%\n      // // When dragging upwards, only move when the cursor is above 50%\n      // console.log(hoverBoundingRect, hoverMiddleY, clientOffset, hoverClientY);\n      // // Dragging downwards\n      // if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n      //     return\n      // }\n      // // Dragging upwards\n      // if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n      //     return\n      // }\n\n      if (hoverStatusId !== statusId) {\n        console.log(\"same col\");\n        return;\n      }\n      // TODO: check drop, NOT hover\n\n      moveItem(dragIndex, hoverIndex, statusTitle);\n      // draggedtask.index = hoverIndex;\n      console.log(\"HAPPEN\");\n    }\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: \"task\",\n    item: {\n      statusId: status.statusId,\n      statusTitle: status.status,\n      type: \"task\",\n      ...task,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [taskClicked, setTaskClicked] = useState(false);\n  const toggleModal = () => {\n    setTaskClicked(prevState => !prevState);\n  };\n  const deleteTaskHandler = e => {\n    e.stopPropagation();\n    deleteTask(task.id);\n    console.log(\"DELETE\");\n  };\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${isDragging ? classes.dashed : \"\"}`,\n      onClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.task,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fa-solid fa-trash-can ${classes.taskTrash}`,\n          onClick: deleteTaskHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.taskStatusWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.taskStatus,\n            children: task.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.taskTitle,\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), taskClicked && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Modal, {\n      icon: task.icon,\n      title: task.title,\n      content: task.content,\n      onClose: toggleModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }, this), document.getElementById('overlay-root'))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(Task, \"EHiSAkWuwOn6yTeZf8ipNoJaFNs=\", false, function () {\n  return [useDrop, useDrag];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","useRef","ReactDOM","useDrag","useDrop","Modal","classes","Task","task","index","moveItem","status","deleteTask","colXPositions","ref","drop","accept","item","monitor","statusId","icon","statusTitle","draggedtask","dragIndex","hoverIndex","console","log","hoverStatusId","isDragging","drag","type","collect","taskClicked","setTaskClicked","toggleModal","prevState","deleteTaskHandler","e","stopPropagation","id","dashed","taskTrash","taskStatusWrapper","taskStatus","taskTitle","title","createPortal","content","document","getElementById"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Task.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Modal from './Modal';\n\nimport classes from './Task.module.css';\n\n// hovered component\nconst Task = ({ task, index, moveItem, status, deleteTask, colXPositions }) => {\n    const ref = useRef(null);\n    // console.log(colXPositions);\n    // dragged component\n    const [, drop] = useDrop({\n        accept: \"task\",\n        drop(item, monitor) {\n            let { statusId, icon, statusTitle, ...draggedtask } = item; // TO DO destruct somehow status & task\n            // if (!ref.current) {\n            //     return\n            // }\n            // console.log(statusId, status.statusId);\n            // console.log(statusId1, icon, task);\n            const dragIndex = draggedtask.index;\n            const hoverIndex = index;\n            console.log(dragIndex, hoverIndex);\n            const hoverStatusId = status.statusId;\n\n            if (dragIndex === hoverIndex) {\n                return\n            }\n\n            // Determine rectangle on screen\n            // const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // // Get element vertical middle\n            // const hoverMiddleY =\n            //     (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // // Determine mouse position\n            // const clientOffset = monitor.getClientOffset()\n            // // Get pixels to the top of element\n            // const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // // Only perform the move when the mouse has crossed half of the items height\n            // // When dragging downwards, only move when the cursor is below 50%\n            // // When dragging upwards, only move when the cursor is above 50%\n            // console.log(hoverBoundingRect, hoverMiddleY, clientOffset, hoverClientY);\n            // // Dragging downwards\n            // if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n            //     return\n            // }\n            // // Dragging upwards\n            // if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n            //     return\n            // }\n\n            if (hoverStatusId !== statusId) {\n                console.log(\"same col\");\n                return;\n            }\n            // TODO: check drop, NOT hover\n\n            moveItem(dragIndex, hoverIndex, statusTitle);\n            // draggedtask.index = hoverIndex;\n            console.log(\"HAPPEN\");\n        },\n    });\n\n    const [{ isDragging }, drag] = useDrag({\n        type: \"task\",\n        item: { statusId: status.statusId, statusTitle: status.status, type: \"task\", ...task, index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [taskClicked, setTaskClicked] = useState(false);\n\n    const toggleModal = () => {\n        setTaskClicked((prevState) => (!prevState))\n    }\n\n    const deleteTaskHandler = (e) => {\n        e.stopPropagation();\n        deleteTask(task.id);\n        console.log(\"DELETE\");\n    }\n\n    drag(drop(ref));\n\n    return (\n        <div ref={ref}>\n            <div\n                \n                className={`${isDragging ? classes.dashed : \"\"}`}\n                onClick={toggleModal}\n            >\n                <div className={classes.task} >\n                    <i className={`fa-solid fa-trash-can ${classes.taskTrash}`} onClick={deleteTaskHandler}></i>\n                    <div className={classes.taskStatusWrapper}>\n                        <div className={classes.taskStatus}>{task.icon}</div>\n                    </div>\n                    <p className={classes.taskTitle}>{task.title}</p>\n                </div>\n            </div>\n            {taskClicked &&\n                ReactDOM.createPortal(\n                    <Modal\n                        icon={task.icon}\n                        title={task.title}\n                        content={task.content}\n                        onClose={toggleModal}\n                    />, document.getElementById('overlay-root')\n                )\n            }\n        </div>\n    );\n};\n\nexport default Task;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}