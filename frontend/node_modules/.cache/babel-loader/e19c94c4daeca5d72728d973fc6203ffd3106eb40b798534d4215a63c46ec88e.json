{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Panel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport Note from './Note';\nimport { useDrop } from 'react-dnd';\nimport { notesList, columnsList } from '../data/panel-data';\nimport Column from './Column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction DragDrop() {\n  _s();\n  const [cards, setCards] = useState(notesList); // declare the final destination/notes here\n  const [columns, setColumns] = useState(columnsList);\n  const moveImage = (dragIndex, hoverIndex) => {\n    setCards(prevcards => {\n      const newItems = prevcards.filter((_, idx) => idx !== dragIndex);\n      newItems.splice(hoverIndex, 0, cards[dragIndex]);\n      console.log(\"moveImage: \" + dragIndex, hoverIndex, newItems);\n      return [...newItems];\n    });\n  };\n  const onDrop = (item, columnName) => {\n    // const mapping = columnName.find(name => )\n    setCards(prevCards => {\n      const newCard = prevCards.filter(i => i.id === item.id);\n      newCard.columnName = columnName;\n      return [...prevCards, newCard];\n    });\n  };\n  const addImageTocards = id => {\n    console.log(\"Dragging is over\"); // printed when isOver is true\n    const pictureList = notesList.filter(picture => id === picture.id); // find the dragged image\n    // notesList = notesList.filter((picture) => id !== picture.id);\n    setCards(cards => [...cards, pictureList[0]]); // add to the cards\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards\",\n      children: columns.map(column => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"column-title\",\n            children: column.columnName.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Column, {\n            columnA: column.columnName,\n            onDrop: onDrop,\n            children: [console.log(cards), cards.filter((item, index) => column.columnName === item.columnName).map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Note, {\n                item: item,\n                index: index,\n                moveImage: moveImage\n              }, item.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 44\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this)]\n        }, column.columnName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(DragDrop, \"B2PKZCUYMuLcwM3lWgW0rn38xMs=\");\n_c = DragDrop;\nexport default DragDrop;\nvar _c;\n$RefreshReg$(_c, \"DragDrop\");","map":{"version":3,"names":["React","useState","useRef","useCallback","Note","useDrop","notesList","columnsList","Column","DragDrop","cards","setCards","columns","setColumns","moveImage","dragIndex","hoverIndex","prevcards","newItems","filter","_","idx","splice","console","log","onDrop","item","columnName","prevCards","newCard","i","id","addImageTocards","pictureList","picture","map","column","toUpperCase","index"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Panel.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport Note from './Note';\nimport { useDrop } from 'react-dnd';\nimport { notesList, columnsList } from '../data/panel-data';\nimport Column from './Column';\n\n\n\nfunction DragDrop() {\n\n    const [cards, setCards] = useState(notesList); // declare the final destination/notes here\n    const [columns, setColumns] = useState(columnsList);\n\n    const moveImage = (dragIndex, hoverIndex) => {\n        setCards((prevcards) => {\n            const newItems = prevcards.filter((_, idx) => idx !== dragIndex);\n            newItems.splice(hoverIndex, 0, cards[dragIndex]);\n            console.log(\"moveImage: \" + dragIndex, hoverIndex, newItems);\n            return [...newItems];\n        });\n    };\n\n    const onDrop = (item, columnName) => {\n        // const mapping = columnName.find(name => )\n        setCards(prevCards => {\n            const newCard = prevCards.filter(i=> i.id === item.id)\n            newCard.columnName = columnName;\n            return [...prevCards, newCard];\n        })\n    }\n\n    const addImageTocards = (id) => {\n        console.log(\"Dragging is over\"); // printed when isOver is true\n        const pictureList = notesList.filter((picture) => id === picture.id); // find the dragged image\n        // notesList = notesList.filter((picture) => id !== picture.id);\n        setCards((cards) => [...cards, pictureList[0]]); // add to the cards\n    }\n\n    return (\n        <>\n            {/* <div className='Pictures' > \n    {PicturesList.map((picture) => {\n        return <Picture key={picture.id} id={picture.id} url={picture.url}/>;\n    })} </div> */}\n            {/* ref={drop} */}\n            <div className='cards'>\n                {/*  onDrop={onDrop} */}\n                {/* , color: isOver  */}\n                {/* {console.log(cards)} */}\n                {columns.map((column) => {\n                    return (\n                        <div key={column.columnName} className={\"column-wrapper\"}>\n                            <h3 className='column-title'>{column.columnName.toUpperCase()}</h3>\n                            <Column columnA={column.columnName} onDrop={onDrop}>\n                                {console.log(cards)}\n                                {cards\n                                .filter((item,index)=>column.columnName === item.columnName)\n                                .map((item, index) => {\n                                    return <Note\n                                    key={item.id}\n                                    item={item}\n                                    index={index}\n                                    moveImage={moveImage}\n                                />;\n                                })\n                                }\n                            </Column>\n                        </div>\n                    )\n                })}\n                {/* {cards.map((picture, index) => {\n                    return <Note\n                        key={picture.id}\n                        id={picture.id}\n                        url={picture.url}\n                        index={index}\n                        moveImage={moveImage}\n                    // ref={ref}\n                    />;\n                })} */}\n            </div>\n        </>\n    )\n}\n\nexport default DragDrop;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}