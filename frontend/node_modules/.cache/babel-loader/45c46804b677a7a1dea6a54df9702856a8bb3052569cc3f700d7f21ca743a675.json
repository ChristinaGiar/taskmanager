{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/frontend/src/pages/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Form, json, Link, redirect, useActionData, useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const authAction = async _ref => {\n  let {\n    params,\n    request\n  } = _ref;\n  let searchParams = new URL(request.url).searchParams;\n  let isLogin = searchParams.get('mode') === 'login';\n  let mode = searchParams.get('mode') === 'login' ? 'login' : 'signup';\n  console.log(\"isLogin: \");\n  let formData = await request.formData();\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password')\n  };\n  console.log(data);\n  console.log(\"isLogin: \", isLogin, formData);\n  const errors = {};\n  const serverErrors = {};\n\n  // validate the fields\n  if (typeof data.email !== \"string\" || !data.email.includes(\"@\")) {\n    errors.email = \"That doesn't look like an email address\";\n  }\n  if (typeof data.password !== \"string\" || data.password.length < 6) {\n    errors.password = \"Password must be > 6 characters\";\n  }\n  console.log(errors);\n  // return data if we have errors\n  if (Object.keys(errors).length) {\n    return errors;\n  }\n  console.log('http://localhost:8080/' + mode);\n  const result = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n\n  // if(result.status === 442 || result.status === 401) {\n  //   // return result;\n  //   return result.serverErrors;\n  // }\n  // if (!result.ok) {\n  //   throw json({ message:'Could not authenticate user.' }, { status: 500 })\n  // }\n\n  const resData = await result.json();\n  const token = resData.token;\n  localStorage.setItem('token', token);\n  const expiration = new Date().getTime() + 60 * 60 * 1000;\n  // console.log(new Date().getTime(), expiration, new Date(expiration).toISOString());\n  localStorage.setItem('expiration-token', new Date(expiration).toISOString());\n\n  // // otherwise create the user and redirect\n  // await createUser(email, password);\n  // return redirect(\"/\");\n  // return formData; /// HOW to redirect & pass input data??\n};\n\nconst AuthPage = () => {\n  _s();\n  const errors = useActionData();\n  return /*#__PURE__*/_jsxDEV(Form, {\n    method: \"post\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\",\n      children: \"Email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"email\",\n      name: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), (errors === null || errors === void 0 ? void 0 : errors.email) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"password\",\n      children: \"Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"password\",\n      name: \"password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), (errors === null || errors === void 0 ? void 0 : errors.password) && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthPage, \"MXG3vJWOluRyotNja3c0q7lD6Co=\", false, function () {\n  return [useActionData];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","Form","json","Link","redirect","useActionData","useSearchParams","authAction","params","request","searchParams","URL","url","isLogin","get","mode","console","log","formData","data","email","password","errors","serverErrors","includes","length","Object","keys","result","fetch","method","headers","body","JSON","stringify","resData","token","localStorage","setItem","expiration","Date","getTime","toISOString","AuthPage"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/frontend/src/pages/AuthPage.js"],"sourcesContent":["import React from 'react';\nimport { Form, json, Link, redirect, useActionData, useSearchParams } from 'react-router-dom';\n\nexport const authAction = async ({params, request}) => {\n\n  let searchParams = new URL(request.url).searchParams;\n  let isLogin = searchParams.get('mode') === 'login';\n  let mode = searchParams.get('mode') === 'login' ? 'login' : 'signup';\n  console.log(\"isLogin: \");\n\n    let formData = await request.formData();\n    const data = {\n      email: formData.get('email'),\n      password: formData.get('password'),\n    };\n    console.log(data);\n    console.log(\"isLogin: \", isLogin, formData);\n\n    const errors = {};\n    const serverErrors = {};\n\n    // validate the fields\n    if (typeof data.email !== \"string\" || !data.email.includes(\"@\")) {\n      errors.email =\n        \"That doesn't look like an email address\";\n    }\n  \n    if (typeof data.password !== \"string\" || data.password.length < 6) {\n      errors.password = \"Password must be > 6 characters\";\n    }\n  console.log(errors);\n    // return data if we have errors\n    if (Object.keys(errors).length) {\n      return errors;\n    }\n    console.log('http://localhost:8080/' + mode);\n\n    const result = await fetch('http://localhost:8080/' + mode, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n    })\n\n    // if(result.status === 442 || result.status === 401) {\n    //   // return result;\n    //   return result.serverErrors;\n    // }\n    // if (!result.ok) {\n    //   throw json({ message:'Could not authenticate user.' }, { status: 500 })\n    // }\n\n    const resData = await result.json();\n    const token = resData.token;\n    localStorage.setItem('token', token);\n    const expiration = new Date().getTime() + 60 * 60 * 1000;\n    // console.log(new Date().getTime(), expiration, new Date(expiration).toISOString());\n    localStorage.setItem('expiration-token', new Date(expiration).toISOString());\n\n  \n    // // otherwise create the user and redirect\n    // await createUser(email, password);\n    // return redirect(\"/\");\n    // return formData; /// HOW to redirect & pass input data??\n}\n\nconst AuthPage = () => {\n  const errors = useActionData();\n  return (\n    <Form method=\"post\">\n        <label htmlFor='email'>Email</label>\n        <input id=\"email\" name=\"email\"></input> \n        {errors?.email && <div>{errors.email}</div>}\n        {/* {serverErrors?.email && <div>{serverErrors.email}</div>} */}\n        <label htmlFor='password'>Password</label>\n\n        <input id=\"password\" name=\"password\"></input> \n        {errors?.password && <div>{errors.password}</div>}\n        <button>Login</button>\n    </Form>\n  )\n}\n\nexport default AuthPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}