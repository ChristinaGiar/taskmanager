{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useState } from \"react\";\nimport Task from \"./Task\";\nimport DropWrapper from \"./DropWrapper\";\nimport AddTask from \"./AddTask\";\nimport AddColumn from \"./AddColumn\";\nimport ScrollButtons from \"./ScrollButtons\";\nimport { data, statuses } from \"../data/index\";\nimport classes from \"./Dashboard.module.css\";\nimport AuthContext from \"../store/auth-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // let count = 0;\n  const [items, setItems] = useState(data);\n  const [columnItems, setColumnItems] = useState(statuses);\n  const [counter, setCounter] = useState({\n    dataCounter: data.length + 1,\n    simpleCounter: 0\n  });\n  const crx = useContext(AuthContext);\n  const onDrop = (item, monitor, status) => {\n    const mapping = columnItems.find(si => si.status === status);\n    crx.dropHandler(mapping.icon);\n    // setItems(prevState => {\n    //     const newItems = prevState\n    //         .filter(i => i.id !== item.id)\n    //         .concat({ ...item, status, icon: mapping.icon });\n    //     return [...newItems];\n    // });\n  };\n\n  const moveItem = (dragIndex, hoverIndex) => {\n    crx.moveHandler(dragIndex, hoverIndex);\n    // const item = items[dragIndex];\n    // setItems(prevState => {\n    //     const newItems = prevState.filter((i, idx) => idx !== dragIndex);\n    //     newItems.splice(hoverIndex, 0, item);\n    //     return [...newItems];\n    // });\n  };\n\n  const addItem = status => {\n    crx.addTaskHandler(status, counter.dataCounter, columnItems);\n    // setItems(prevState => {\n    //     // const lastStatusItemIndex = prevState.findIndex((item) => item.status === status);\n    //     console.log(data.length, counter.dataCounter);\n    //     const column = columnItems.find(column => column.status === status)\n    //     prevState.splice(prevState.length, 0, {\n    //         id: counter.dataCounter,\n    //         icon: column.icon,\n    //         status: column.status,\n    //         title: \"Task Title\",\n    //         content: \"Task Description\"\n    //     });\n    //     return [...prevState];\n    // })\n    setCounter(prevCounter => ({\n      ...prevCounter,\n      dataCounter: prevCounter.dataCounter + 1\n    }));\n  };\n  const deleteTask = id => {\n    crx.deleteTaskHandler(id);\n    // setItems(prevState => {\n    //     const newItems = prevState.filter(item => item.id !== id);\n    //     return [...newItems];\n\n    // })\n  };\n\n  const addColumn = () => {\n    // count++\n    setCounter(prevCounter => ({\n      ...prevCounter,\n      simpleCounter: prevCounter.simpleCounter + 1\n    }));\n    setColumnItems(prevColumns => [...prevColumns, {\n      status: `New Column ${counter.simpleCounter}`,\n      icon: \"🎉\"\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `row ${classes.box}`,\n      children: [columnItems.map(s => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `col-6 col-sm-4 col-md-3`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.columnWrapper,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: classes.columnHeader,\n            children: s.status.toUpperCase()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DropWrapper, {\n            onDrop: onDrop,\n            status: s.status,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [console.log(crx.items.filter(i => i.status === s.status).map((i, idx) => idx)), crx.items.filter(i => i.status === s.status).map((i, idx) => /*#__PURE__*/_jsxDEV(Task, {\n                task: i,\n                index: idx,\n                moveItem: moveItem,\n                status: s.status,\n                deleteTask: deleteTask\n              }, i.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 54\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AddTask, {\n            items: crx.items,\n            status: s.status,\n            addItem: addItem\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this)\n      }, s.status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(AddColumn, {\n        addColumn: addColumn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ScrollButtons, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"36Nv+yoLw9QlGxZPF2IMQYpdnH0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useContext","useState","Task","DropWrapper","AddTask","AddColumn","ScrollButtons","data","statuses","classes","AuthContext","Dashboard","items","setItems","columnItems","setColumnItems","counter","setCounter","dataCounter","length","simpleCounter","crx","onDrop","item","monitor","status","mapping","find","si","dropHandler","icon","moveItem","dragIndex","hoverIndex","moveHandler","addItem","addTaskHandler","prevCounter","deleteTask","id","deleteTaskHandler","addColumn","prevColumns","box","map","s","columnWrapper","columnHeader","toUpperCase","console","log","filter","i","idx"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Dashboard.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport Task from \"./Task\";\nimport DropWrapper from \"./DropWrapper\";\nimport AddTask from \"./AddTask\";\nimport AddColumn from \"./AddColumn\";\nimport ScrollButtons from \"./ScrollButtons\";\nimport { data, statuses } from \"../data/index\";\n\nimport classes from \"./Dashboard.module.css\";\nimport AuthContext from \"../store/auth-context\";\n\nconst Dashboard = () => {\n    // let count = 0;\n    const [items, setItems] = useState(data);\n    const [columnItems, setColumnItems] = useState(statuses);\n    const [counter, setCounter] = useState({dataCounter: data.length+1, simpleCounter: 0});\n\n    const crx = useContext(AuthContext);\n\n    const onDrop = (item, monitor, status) => {\n        const mapping = columnItems.find(si => si.status === status);\n\n        crx.dropHandler(mapping.icon);\n        // setItems(prevState => {\n        //     const newItems = prevState\n        //         .filter(i => i.id !== item.id)\n        //         .concat({ ...item, status, icon: mapping.icon });\n        //     return [...newItems];\n        // });\n    };\n\n    const moveItem = (dragIndex, hoverIndex) => {\n        crx.moveHandler(dragIndex, hoverIndex);\n        // const item = items[dragIndex];\n        // setItems(prevState => {\n        //     const newItems = prevState.filter((i, idx) => idx !== dragIndex);\n        //     newItems.splice(hoverIndex, 0, item);\n        //     return [...newItems];\n        // });\n    };\n    const addItem = (status) => {\n        crx.addTaskHandler(status, counter.dataCounter, columnItems);\n        // setItems(prevState => {\n        //     // const lastStatusItemIndex = prevState.findIndex((item) => item.status === status);\n        //     console.log(data.length, counter.dataCounter);\n        //     const column = columnItems.find(column => column.status === status)\n        //     prevState.splice(prevState.length, 0, {\n        //         id: counter.dataCounter,\n        //         icon: column.icon,\n        //         status: column.status,\n        //         title: \"Task Title\",\n        //         content: \"Task Description\"\n        //     });\n        //     return [...prevState];\n        // })\n        setCounter(prevCounter => ({ ...prevCounter, dataCounter: prevCounter.dataCounter + 1 }));\n    }\n\n    const deleteTask = (id) => {\n        crx.deleteTaskHandler(id);\n        // setItems(prevState => {\n        //     const newItems = prevState.filter(item => item.id !== id);\n        //     return [...newItems];\n\n        // })\n    }\n    const addColumn = () => {\n        // count++\n        setCounter(prevCounter => ({ ...prevCounter, simpleCounter: prevCounter.simpleCounter + 1 }));\n\n        setColumnItems(prevColumns => ([ ...prevColumns,  {\n            status: `New Column ${counter.simpleCounter}`,\n            icon: \"🎉\",\n        }]));\n    }\n\n    return (\n        <div className={\"container\"}>\n            <div className={`row ${classes.box}`}>\n                {columnItems.map(s => (\n                    <div key={s.status} className={`col-6 col-sm-4 col-md-3`}>\n                        <div className={classes.columnWrapper}>\n                        <h2 className={classes.columnHeader}>{s.status.toUpperCase()}</h2>\n                        <DropWrapper onDrop={onDrop} status={s.status}>\n                            {/* get the status when onDrop exec */}\n                            <div>\n                                {console.log(crx.items\n                                    .filter(i => i.status === s.status).map((i, idx) => idx))}\n                                {crx.items\n                                    .filter(i => i.status === s.status)\n                                    .map((i, idx) => <Task key={i.id} task={i} index={idx} moveItem={moveItem} status={s.status} deleteTask={deleteTask}/>)\n                                }\n                            </div>\n                        </DropWrapper>\n                        {/* {console.log(\"RUN\")} */}\n                        <AddTask items={crx.items} status={s.status} addItem={addItem}></AddTask>\n                        </div>\n                    </div>\n                ))}\n                <AddColumn addColumn={addColumn} />\n                <ScrollButtons />\n            </div>\n        </div>\n    );\n};\n\nexport default Dashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}