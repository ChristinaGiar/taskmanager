{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/frontend/src/pages/AuthPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Form, json, Link, redirect, useActionData, useSearchParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const authAction = async _ref => {\n  let {\n    params,\n    request\n  } = _ref;\n  let searchParams = new URL(request.url).searchParams;\n  let isLogin = searchParams.get('mode') === 'login';\n  let mode = searchParams.get('mode') === 'login' ? 'login' : 'signup';\n  console.log(\"isLogin: \");\n  let formData = await request.formData();\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password')\n  };\n  console.log(data);\n  console.log(\"isLogin: \", isLogin, formData);\n  const errors = {};\n\n  // validate the fields\n  if (typeof data.email !== \"string\" || !data.email.includes(\"@\")) {\n    errors.email = \"That doesn't look like an email address\";\n  }\n  if (typeof data.password !== \"string\" || data.password.length < 6) {\n    errors.password = \"Password must be > 6 characters\";\n  }\n  console.log(errors);\n  if (Object.keys(errors).length) {\n    // return [errors, redirect(\"/auth?mode=\" + mode)];\n    return errors;\n  }\n  console.log('http://localhost:8080/' + mode);\n  /*let result;\n      try {\n        // const response = await fetch('https://website');\n        result = await fetch('http://localhost:8080/' + mode, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data),\n        })\n      } catch (error) {\n        // TypeError: Failed to fetch\n        console.log('There was an error', error);\n      }*/\n  /*let response;\n   try {\n    response = await fetch('http://localhost:8080/' + mode, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n    })\n  } catch (error) {\n    console.log('There was an error', error);\n  }\n   // Uses the 'optional chaining' operator\n  if (response?.ok) {\n    console.log('Use the response here!');\n  } else {\n    if (response.status === 422 || response.status === 401) {\n      // return response;\n      console.log(\"response.serverErrors\", response.serverErrors);\n      return [response.serverErrors, redirect(\"/auth?mode=\" + mode)];\n    }\n    if (!response.ok) {\n      throw json({ message: 'Could not authenticate user.' }, { status: 500 })\n    }\n    return redirect(\"/auth?mode=\" + mode);\n    console.log(`HTTP Response Code: ${response?.status}`)\n  }*/\n  let response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (response.status === 422 || response.status === 401) {\n    // return response;\n    // return redirect(\"/post\");\n\n    // return response.serverErrors;\n    console.log(\"response.serverErrors\", response);\n    return response.serverErrors; //, redirect(\"/auth?mode=\" + mode),  serverErrors NOT SHOWN\n  }\n  // if (!response.ok) {\n  //   throw json({ message: 'Could not authenticate user.' }, { status: 500 })\n  // }\n\n  const resData = await response.json();\n  const token = resData.token;\n  localStorage.setItem('token', token);\n  const expiration = new Date().getTime() + 60 * 60 * 1000;\n  // console.log(new Date().getTime(), expiration, new Date(expiration).toISOString());\n  localStorage.setItem('expiration-token', new Date(expiration).toISOString());\n\n  // // otherwise create the user and redirect\n  // await createUser(email, password);\n  return redirect(\"/\");\n\n  // return formData; /// HOW to redirect & pass input data??\n};\n\nconst AuthPage = () => {\n  _s();\n  let errors = useActionData();\n  // if (Array.isArray(errors)) {\n  //   errors = errors[0];\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"email\",\n        name: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), (errors === null || errors === void 0 ? void 0 : errors.email) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errors.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"password\",\n        name: \"password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), (errors === null || errors === void 0 ? void 0 : errors.password) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: errors.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(AuthPage, \"MXG3vJWOluRyotNja3c0q7lD6Co=\", false, function () {\n  return [useActionData];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","Form","json","Link","redirect","useActionData","useSearchParams","authAction","params","request","searchParams","URL","url","isLogin","get","mode","console","log","formData","data","email","password","errors","includes","length","Object","keys","response","fetch","method","headers","body","JSON","stringify","status","serverErrors","resData","token","localStorage","setItem","expiration","Date","getTime","toISOString","AuthPage"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/frontend/src/pages/AuthPage.js"],"sourcesContent":["import React from 'react';\nimport { Form, json, Link, redirect, useActionData, useSearchParams } from 'react-router-dom';\n\nexport const authAction = async ({ params, request }) => {\n\n  let searchParams = new URL(request.url).searchParams;\n  let isLogin = searchParams.get('mode') === 'login';\n  let mode = searchParams.get('mode') === 'login' ? 'login' : 'signup';\n  console.log(\"isLogin: \");\n\n  let formData = await request.formData();\n  const data = {\n    email: formData.get('email'),\n    password: formData.get('password'),\n  };\n  console.log(data);\n  console.log(\"isLogin: \", isLogin, formData);\n\n  const errors = {};\n\n  // validate the fields\n  if (typeof data.email !== \"string\" || !data.email.includes(\"@\")) {\n    errors.email =\n      \"That doesn't look like an email address\";\n  }\n\n  if (typeof data.password !== \"string\" || data.password.length < 6) {\n    errors.password = \"Password must be > 6 characters\";\n  }\n  console.log(errors);\n\n  if (Object.keys(errors).length) {\n    // return [errors, redirect(\"/auth?mode=\" + mode)];\n    return errors;\n\n  }\n  console.log('http://localhost:8080/' + mode);\n  /*let result;\n      try {\n        // const response = await fetch('https://website');\n        result = await fetch('http://localhost:8080/' + mode, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(data),\n        })\n      } catch (error) {\n        // TypeError: Failed to fetch\n        console.log('There was an error', error);\n      }*/\n  /*let response;\n\n  try {\n    response = await fetch('http://localhost:8080/' + mode, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n    })\n  } catch (error) {\n    console.log('There was an error', error);\n  }\n\n  // Uses the 'optional chaining' operator\n  if (response?.ok) {\n    console.log('Use the response here!');\n  } else {\n    if (response.status === 422 || response.status === 401) {\n      // return response;\n      console.log(\"response.serverErrors\", response.serverErrors);\n      return [response.serverErrors, redirect(\"/auth?mode=\" + mode)];\n    }\n    if (!response.ok) {\n      throw json({ message: 'Could not authenticate user.' }, { status: 500 })\n    }\n    return redirect(\"/auth?mode=\" + mode);\n    console.log(`HTTP Response Code: ${response?.status}`)\n  }*/\n  let response = await fetch('http://localhost:8080/' + mode, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data),\n  })\n\n\n  if (response.status === 422 || response.status === 401) {\n    // return response;\n    // return redirect(\"/post\");\n\n    // return response.serverErrors;\n    console.log(\"response.serverErrors\", response);\n    return response.serverErrors; //, redirect(\"/auth?mode=\" + mode),  serverErrors NOT SHOWN\n\n  }\n  // if (!response.ok) {\n  //   throw json({ message: 'Could not authenticate user.' }, { status: 500 })\n  // }\n\n  const resData = await response.json();\n  const token = resData.token;\n  localStorage.setItem('token', token);\n  const expiration = new Date().getTime() + 60 * 60 * 1000;\n  // console.log(new Date().getTime(), expiration, new Date(expiration).toISOString());\n  localStorage.setItem('expiration-token', new Date(expiration).toISOString());\n\n\n  // // otherwise create the user and redirect\n  // await createUser(email, password);\n  return redirect(\"/\");\n\n  // return formData; /// HOW to redirect & pass input data??\n}\n\nconst AuthPage = () => {\n  let errors = useActionData();\n  // if (Array.isArray(errors)) {\n  //   errors = errors[0];\n  // }\n  return (\n    <>\n      <Form method=\"post\">\n        <label htmlFor='email'>Email</label>\n        <input id=\"email\" name=\"email\"></input>\n        {errors?.email && <div>{errors.email}</div>}\n        {/* {errors[0]?.email && <div>{errors[0].email}</div>} */}\n        {/* {serverErrors?.email && <div>{serverErrors.email}</div>} */}\n        <label htmlFor='password'>Password</label>\n\n        <input id=\"password\" name=\"password\"></input>\n        {errors?.password && <div>{errors.password}</div>}\n        <button>Login</button>\n      </Form>\n    </>\n  )\n}\n\nexport default AuthPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}