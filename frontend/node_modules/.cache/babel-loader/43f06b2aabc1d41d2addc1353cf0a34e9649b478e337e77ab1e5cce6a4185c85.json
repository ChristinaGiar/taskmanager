{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Item.js\",\n  _s = $RefreshSig$();\nimport React, { Fragment, useState, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Window from \"./Window\";\nimport ITEM_TYPE from \"../data/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Item = _ref => {\n  _s();\n  let {\n    item,\n    index,\n    moveItem,\n    status\n  } = _ref;\n  const ref = useRef(null);\n  const [, drop] = useDrop({\n    accept: \"card\",\n    hover(item, monitor) {\n      if (!ref.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      const hoveredRect = ref.current.getBoundingClientRect();\n      const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n      const mousePosition = monitor.getClientOffset();\n      const hoverClientY = mousePosition.y - hoveredRect.top;\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      moveItem(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    accept: \"card\",\n    item: {\n      type: ITEM_TYPE,\n      ...item,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [show, setShow] = useState(false);\n  const onOpen = () => setShow(true);\n  const onClose = () => setShow(false);\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref,\n      style: {\n        opacity: isDragging ? 0 : 1\n      },\n      className: \"item\",\n      onClick: onOpen,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"color-bar\",\n        style: {\n          backgroundColor: status.color\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-title\",\n        children: item.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"item-status\",\n        children: item.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(Item, \"rF6lY0o2hFLpxncNahbNMfU9l3Q=\", false, function () {\n  return [useDrop, useDrag];\n});\n_c = Item;\nexport default Item;\nvar _c;\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"names":["React","Fragment","useState","useRef","useDrag","useDrop","Window","ITEM_TYPE","Item","item","index","moveItem","status","ref","drop","accept","hover","monitor","current","dragIndex","hoverIndex","hoveredRect","getBoundingClientRect","hoverMiddleY","bottom","top","mousePosition","getClientOffset","hoverClientY","y","isDragging","drag","type","collect","show","setShow","onOpen","onClose","opacity","backgroundColor","color","content","icon"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Item.js"],"sourcesContent":["import React, { Fragment, useState, useRef } from \"react\";\nimport { useDrag, useDrop } from \"react-dnd\";\nimport Window from \"./Window\";\nimport ITEM_TYPE from \"../data/types\";\n\nconst Item = ({ item, index, moveItem, status }) => {\n    const ref = useRef(null);\n\n    const [, drop] = useDrop({\n        accept: \"card\",\n        hover(item, monitor) {\n            if (!ref.current) {\n                return\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n\n            if (dragIndex === hoverIndex) {\n                return\n            }\n\n            const hoveredRect = ref.current.getBoundingClientRect();\n            const hoverMiddleY = (hoveredRect.bottom - hoveredRect.top) / 2;\n            const mousePosition = monitor.getClientOffset();\n            const hoverClientY = mousePosition.y - hoveredRect.top;\n\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return;\n            }\n            moveItem(dragIndex, hoverIndex);\n            item.index = hoverIndex;\n        },\n    });\n\n    const [{ isDragging }, drag] = useDrag({\n        accept: \"card\",\n        item: { type: ITEM_TYPE, ...item, index },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [show, setShow] = useState(false);\n\n    const onOpen = () => setShow(true);\n\n    const onClose = () => setShow(false);\n\n    drag(drop(ref));\n\n    return (\n        <Fragment>\n            <div\n                ref={ref}\n                style={{ opacity: isDragging ? 0 : 1 }}\n                className={\"item\"}\n                onClick={onOpen}\n            >\n                <div className={\"color-bar\"} style={{ backgroundColor: status.color }}/>\n                <p className={\"item-title\"}>{item.content}</p>\n                <p className={\"item-status\"}>{item.icon}</p>\n            </div>\n            {/* <Window\n                item={item}\n                onClose={onClose}\n                show={show}\n            /> */}\n        </Fragment>\n    );\n};\n\nexport default Item;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACzD,SAASC,OAAO,EAAEC,OAAO,QAAQ,WAAW;AAC5C,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,SAAS,MAAM,eAAe;AAAC;AAEtC,MAAMC,IAAI,GAAG,QAAuC;EAAA;EAAA,IAAtC;IAAEC,IAAI;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAO,CAAC;EAC3C,MAAMC,GAAG,GAAGV,MAAM,CAAC,IAAI,CAAC;EAExB,MAAM,GAAGW,IAAI,CAAC,GAAGT,OAAO,CAAC;IACrBU,MAAM,EAAE,MAAM;IACdC,KAAK,CAACP,IAAI,EAAEQ,OAAO,EAAE;MACjB,IAAI,CAACJ,GAAG,CAACK,OAAO,EAAE;QACd;MACJ;MACA,MAAMC,SAAS,GAAGV,IAAI,CAACC,KAAK;MAC5B,MAAMU,UAAU,GAAGV,KAAK;MAExB,IAAIS,SAAS,KAAKC,UAAU,EAAE;QAC1B;MACJ;MAEA,MAAMC,WAAW,GAAGR,GAAG,CAACK,OAAO,CAACI,qBAAqB,EAAE;MACvD,MAAMC,YAAY,GAAG,CAACF,WAAW,CAACG,MAAM,GAAGH,WAAW,CAACI,GAAG,IAAI,CAAC;MAC/D,MAAMC,aAAa,GAAGT,OAAO,CAACU,eAAe,EAAE;MAC/C,MAAMC,YAAY,GAAGF,aAAa,CAACG,CAAC,GAAGR,WAAW,CAACI,GAAG;MAEtD,IAAIN,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACvD;MACJ;MAEA,IAAIJ,SAAS,GAAGC,UAAU,IAAIQ,YAAY,GAAGL,YAAY,EAAE;QACvD;MACJ;MACAZ,QAAQ,CAACQ,SAAS,EAAEC,UAAU,CAAC;MAC/BX,IAAI,CAACC,KAAK,GAAGU,UAAU;IAC3B;EACJ,CAAC,CAAC;EAEF,MAAM,CAAC;IAAEU;EAAW,CAAC,EAAEC,IAAI,CAAC,GAAG3B,OAAO,CAAC;IACnCW,MAAM,EAAE,MAAM;IACdN,IAAI,EAAE;MAAEuB,IAAI,EAAEzB,SAAS;MAAE,GAAGE,IAAI;MAAEC;IAAM,CAAC;IACzCuB,OAAO,EAAEhB,OAAO,KAAK;MACjBa,UAAU,EAAEb,OAAO,CAACa,UAAU;IAClC,CAAC;EACL,CAAC,CAAC;EAEF,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAEvC,MAAMkC,MAAM,GAAG,MAAMD,OAAO,CAAC,IAAI,CAAC;EAElC,MAAME,OAAO,GAAG,MAAMF,OAAO,CAAC,KAAK,CAAC;EAEpCJ,IAAI,CAACjB,IAAI,CAACD,GAAG,CAAC,CAAC;EAEf,oBACI,QAAC,QAAQ;IAAA,uBACL;MACI,GAAG,EAAEA,GAAI;MACT,KAAK,EAAE;QAAEyB,OAAO,EAAER,UAAU,GAAG,CAAC,GAAG;MAAE,CAAE;MACvC,SAAS,EAAE,MAAO;MAClB,OAAO,EAAEM,MAAO;MAAA,wBAEhB;QAAK,SAAS,EAAE,WAAY;QAAC,KAAK,EAAE;UAAEG,eAAe,EAAE3B,MAAM,CAAC4B;QAAM;MAAE;QAAA;QAAA;QAAA;MAAA,QAAE,eACxE;QAAG,SAAS,EAAE,YAAa;QAAA,UAAE/B,IAAI,CAACgC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAK,eAC9C;QAAG,SAAS,EAAE,aAAc;QAAA,UAAEhC,IAAI,CAACiC;MAAI;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA;EAC1C;IAAA;IAAA;IAAA;EAAA,QAMC;AAEnB,CAAC;AAAC,GApEIlC,IAAI;EAAA,QAGWH,OAAO,EA8BOD,OAAO;AAAA;AAAA,KAjCpCI,IAAI;AAsEV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}