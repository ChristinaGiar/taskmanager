{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDrag } from \"react-dnd\";\nimport Modal from './Modal';\nimport classes from './Task.module.css';\n\n// hovered component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = _ref => {\n  _s();\n  let {\n    task,\n    deleteTask\n  } = _ref;\n  const ref = useRef(null);\n\n  // dragged component\n  /*\n  const [, drop] = useDrop({\n      accept: \"task\",\n      drop(item, monitor) {\n          console.log(\"FROP\");\n          let { statusId, icon, statusTitle, ...draggedtask } = item; // TO DO destruct somehow status & task\n          if (!ref.current) {\n              return\n          }\n          // console.log(statusId, status.statusId);\n          // console.log(statusId1, icon, task);\n          const dragIndex = draggedtask.index;\n          const hoverIndex = index;\n          console.log(dragIndex, hoverIndex);\n          const hoverStatusId = status.statusId;\n           if (dragIndex === hoverIndex) {\n              return\n          }\n           // Determine rectangle on screen\n          // const hoverBoundingRect = ref.current?.getBoundingClientRect()\n          // // Get element vertical middle\n          // const hoverMiddleY =\n          //     (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n          // // Determine mouse position\n          // const clientOffset = monitor.getClientOffset()\n          // // Get pixels to the top of element\n          // const hoverClientY = clientOffset.y - hoverBoundingRect.top\n          // // Only perform the move when the mouse has crossed half of the items height\n          // // When dragging downwards, only move when the cursor is below 50%\n          // // When dragging upwards, only move when the cursor is above 50%\n          // console.log(hoverBoundingRect, hoverMiddleY, clientOffset, hoverClientY);\n          // // Dragging downwards\n          // if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n          //     return\n          // }\n          // // Dragging upwards\n          // if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n          //     return\n          // }\n           // if (hoverStatusId !== statusId) {\n          //     console.log(\"same col\");\n          //     return;\n          // }\n          // TODO: check drop, NOT hover\n           moveItem(dragIndex, hoverIndex, statusTitle);\n          // draggedtask.index = hoverIndex;\n          console.log(\"HAPPEN\");\n      },\n  });*/\n\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: \"task\",\n    item: {\n      ...task\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const [taskClicked, setTaskClicked] = useState(false);\n  const toggleModal = () => {\n    setTaskClicked(prevState => !prevState);\n  };\n  const deleteTaskHandler = e => {\n    e.stopPropagation();\n    deleteTask(task.id);\n  };\n  drag(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${isDragging ? classes.dashed : \"\"}`,\n      onClick: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.task,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fa-solid fa-trash-can ${classes.taskTrash}`,\n          onClick: deleteTaskHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.taskStatusWrapper,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.taskStatus,\n            children: task.icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.taskTitle,\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.progress,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.progressFilled,\n            style: {\n              width: task.progress / 100\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), taskClicked && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/_jsxDEV(Modal, {\n      task: task,\n      onClose: toggleModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }, this), document.getElementById('overlay-root'))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n_s(Task, \"ZfJEVf2f4xV9I87KQdsFWxrIIcs=\", false, function () {\n  return [useDrag];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","useRef","ReactDOM","useDrag","Modal","classes","Task","task","deleteTask","ref","isDragging","drag","type","item","collect","monitor","taskClicked","setTaskClicked","toggleModal","prevState","deleteTaskHandler","e","stopPropagation","id","dashed","taskTrash","taskStatusWrapper","taskStatus","icon","taskTitle","title","progress","progressFilled","width","createPortal","document","getElementById"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/Task.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useDrag } from \"react-dnd\";\nimport Modal from './Modal';\n\nimport classes from './Task.module.css';\n\n// hovered component\nconst Task = ({ task, deleteTask }) => {\n    const ref = useRef(null);\n\n    // dragged component\n    /*\n    const [, drop] = useDrop({\n        accept: \"task\",\n        drop(item, monitor) {\n            console.log(\"FROP\");\n            let { statusId, icon, statusTitle, ...draggedtask } = item; // TO DO destruct somehow status & task\n            if (!ref.current) {\n                return\n            }\n            // console.log(statusId, status.statusId);\n            // console.log(statusId1, icon, task);\n            const dragIndex = draggedtask.index;\n            const hoverIndex = index;\n            console.log(dragIndex, hoverIndex);\n            const hoverStatusId = status.statusId;\n\n            if (dragIndex === hoverIndex) {\n                return\n            }\n\n            // Determine rectangle on screen\n            // const hoverBoundingRect = ref.current?.getBoundingClientRect()\n            // // Get element vertical middle\n            // const hoverMiddleY =\n            //     (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n            // // Determine mouse position\n            // const clientOffset = monitor.getClientOffset()\n            // // Get pixels to the top of element\n            // const hoverClientY = clientOffset.y - hoverBoundingRect.top\n            // // Only perform the move when the mouse has crossed half of the items height\n            // // When dragging downwards, only move when the cursor is below 50%\n            // // When dragging upwards, only move when the cursor is above 50%\n            // console.log(hoverBoundingRect, hoverMiddleY, clientOffset, hoverClientY);\n            // // Dragging downwards\n            // if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n            //     return\n            // }\n            // // Dragging upwards\n            // if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n            //     return\n            // }\n\n            // if (hoverStatusId !== statusId) {\n            //     console.log(\"same col\");\n            //     return;\n            // }\n            // TODO: check drop, NOT hover\n\n            moveItem(dragIndex, hoverIndex, statusTitle);\n            // draggedtask.index = hoverIndex;\n            console.log(\"HAPPEN\");\n        },\n    });*/\n\n    const [{ isDragging }, drag] = useDrag({\n        type: \"task\",\n        item: { ...task },\n        collect: monitor => ({\n            isDragging: monitor.isDragging()\n        })\n    });\n\n    const [taskClicked, setTaskClicked] = useState(false);\n\n    const toggleModal = () => {\n        setTaskClicked((prevState) => (!prevState))\n    }\n\n    const deleteTaskHandler = (e) => {\n        e.stopPropagation();\n        deleteTask(task.id);\n    }\n\n    drag(ref);\n\n    return (\n        <div ref={ref}>\n            <div\n                className={`${isDragging ? classes.dashed : \"\"}`}\n                onClick={toggleModal}\n            >\n                <div className={classes.task} >\n                    <i className={`fa-solid fa-trash-can ${classes.taskTrash}`} onClick={deleteTaskHandler}></i>\n                    <div className={classes.taskStatusWrapper}>\n                        <div className={classes.taskStatus}>{task.icon}</div>\n                    </div>\n                    <p className={classes.taskTitle}>{task.title}</p>\n                    <div  className={classes.progress}>\n                        <div className={classes.progressFilled} style={{width:task.progress/100}}></div>\n                    </div>\n                </div>\n            </div>\n            {taskClicked &&\n                ReactDOM.createPortal(\n                    <Modal\n                        task={task}\n                        onClose={toggleModal}\n                    />, document.getElementById('overlay-root')\n                )\n            }\n        </div>\n    );\n};\n\nexport default Task;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}