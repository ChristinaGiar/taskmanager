{"ast":null,"code":"var _jsxFileName = \"/Users/cgiaramani/AEM-projects/to-do-mine/src/components/DragDrop.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport Picture from './Picture';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet picturesList = [{\n  id: 1,\n  url: \"https://images.unsplash.com/photo-1513542789411-b6a5d4f31634?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374&q=80\"\n}, {\n  id: 2,\n  url: \"https://images.unsplash.com/photo-1481349518771-20055b2a7b24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1539&q=80\"\n}, {\n  id: 3,\n  url: \"https://images.unsplash.com/photo-1509281373149-e957c6296406?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=728&q=80\"\n}];\nfunction DragDrop() {\n  _s();\n  const [board, setBoard] = useState(picturesList); // declare the final destination/pictures here\n  const moveImage = useCallback((dragIndex, hoverIndex) => {\n    setBoard(prevBoard => {\n      //  prevBoard.splice(hoverIndex, 0, prevBoard[dragIndex]); //.splice(dragIndex, 1)\n      console.log(dragIndex, hoverIndex, prevBoard);\n      return prevBoard;\n    }\n    // update(prevBoard, {\n    //     $splice: [\n    //         [dragIndex, 1],\n    //         [hoverIndex, 0, prevBoard[dragIndex]],\n    //     ],\n    // }),\n    );\n  }, []);\n  // const [{ isOver }, drop] = useDrop(() => ({\n  //     accept: \"image\",\n  //     drop: (item) => addImageToBoard(item.id),\n  //     collect: (monitor) => ({\n  //         isOver: !!monitor.isOver(),\n  //     }),\n  //     hover(item, monitor) { /// hovered item underneath\n  // \t\tif (!ref.current) {\n  // \t\t\treturn\n  // \t\t}\n  // \t\tconst dragIndex = item.index\n  // \t\tconst hoverIndex = index\n\n  // \t\t// Don't replace items with themselves\n  // \t\tif (dragIndex === hoverIndex) {\n  // \t\t\treturn\n  // \t\t}\n\n  // \t\t// Determine rectangle on screen\n  // \t\tconst hoverBoundingRect = ref.current?.getBoundingClientRect()\n\n  // \t\t// Get vertical middle\n  // \t\tconst hoverMiddleY =\n  // \t\t\t(hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n  // \t\t// Determine mouse position\n  // \t\tconst clientOffset = monitor.getClientOffset()\n\n  // \t\t// Get pixels to the top\n  // \t\tconst hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n  // \t\t// Only perform the move when the mouse has crossed half of the items height\n  // \t\t// When dragging downwards, only move when the cursor is below 50%\n  // \t\t// When dragging upwards, only move when the cursor is above 50%\n\n  // \t\t// Dragging downwards\n  // \t\tif (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n  // \t\t\treturn\n  // \t\t}\n\n  // \t\t// Dragging upwards\n  // \t\tif (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n  // \t\t\treturn\n  // \t\t}\n\n  // \t\t// Time to actually perform the action\n  // \t\tmoveCard(dragIndex, hoverIndex)\n\n  // \t\t// Note: we're mutating the monitor item here!\n  // \t\t// Generally it's better to avoid mutations,\n  // \t\t// but it's good here for the sake of performance\n  // \t\t// to avoid expensive index searches.\n  // \t\titem.index = hoverIndex\n  // \t},\n  // }));\n\n  const addImageToBoard = id => {\n    console.log(\"Dragging is over\"); // printed when isOver is true\n    const pictureList = picturesList.filter(picture => id === picture.id); // find the dragged image\n    // picturesList = picturesList.filter((picture) => id !== picture.id);\n    setBoard(board => [...board, pictureList[0]]); // add to the board\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      style: {\n        border: '2px solid black',\n        height: '100vh',\n        display: 'flex',\n        flexDirection: 'column'\n      },\n      children: [console.log(board), board.map((picture, index) => {\n        return /*#__PURE__*/_jsxDEV(Picture, {\n          id: picture.id,\n          url: picture.url,\n          index: index,\n          moveImage: moveImage\n          // ref={ref}\n        }, picture.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 28\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(DragDrop, \"VurxbjqP89Dmeufb9tEejvaPJGg=\");\n_c = DragDrop;\nexport default DragDrop;\nvar _c;\n$RefreshReg$(_c, \"DragDrop\");","map":{"version":3,"names":["React","useState","useRef","useCallback","Picture","useDrop","picturesList","id","url","DragDrop","board","setBoard","moveImage","dragIndex","hoverIndex","prevBoard","console","log","addImageToBoard","pictureList","filter","picture","border","height","display","flexDirection","map","index"],"sources":["/Users/cgiaramani/AEM-projects/to-do-mine/src/components/DragDrop.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport Picture from './Picture';\nimport { useDrop } from 'react-dnd';\n\n\nlet picturesList = [\n    {\n        id: 1,\n        url: \"https://images.unsplash.com/photo-1513542789411-b6a5d4f31634?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1374&q=80\"\n    },\n    {\n        id: 2,\n        url: \"https://images.unsplash.com/photo-1481349518771-20055b2a7b24?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1539&q=80\"\n    },\n    {\n        id: 3,\n        url: \"https://images.unsplash.com/photo-1509281373149-e957c6296406?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=728&q=80\"\n    }\n]\nfunction DragDrop() {\n\n    const [board, setBoard] = useState(picturesList); // declare the final destination/pictures here\n    const moveImage = useCallback((dragIndex, hoverIndex) => {\n        setBoard((prevBoard) => {\n            //  prevBoard.splice(hoverIndex, 0, prevBoard[dragIndex]); //.splice(dragIndex, 1)\n             console.log(dragIndex, hoverIndex, prevBoard);\n             return prevBoard;\n        }\n            // update(prevBoard, {\n            //     $splice: [\n            //         [dragIndex, 1],\n            //         [hoverIndex, 0, prevBoard[dragIndex]],\n            //     ],\n            // }),\n        )\n    }, [])\n    // const [{ isOver }, drop] = useDrop(() => ({\n    //     accept: \"image\",\n    //     drop: (item) => addImageToBoard(item.id),\n    //     collect: (monitor) => ({\n    //         isOver: !!monitor.isOver(),\n    //     }),\n    //     hover(item, monitor) { /// hovered item underneath\n\t// \t\tif (!ref.current) {\n\t// \t\t\treturn\n\t// \t\t}\n\t// \t\tconst dragIndex = item.index\n\t// \t\tconst hoverIndex = index\n\n\t// \t\t// Don't replace items with themselves\n\t// \t\tif (dragIndex === hoverIndex) {\n\t// \t\t\treturn\n\t// \t\t}\n\n\t// \t\t// Determine rectangle on screen\n\t// \t\tconst hoverBoundingRect = ref.current?.getBoundingClientRect()\n\n\t// \t\t// Get vertical middle\n\t// \t\tconst hoverMiddleY =\n\t// \t\t\t(hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n\n\t// \t\t// Determine mouse position\n\t// \t\tconst clientOffset = monitor.getClientOffset()\n\n\t// \t\t// Get pixels to the top\n\t// \t\tconst hoverClientY = clientOffset.y - hoverBoundingRect.top\n\n\t// \t\t// Only perform the move when the mouse has crossed half of the items height\n\t// \t\t// When dragging downwards, only move when the cursor is below 50%\n\t// \t\t// When dragging upwards, only move when the cursor is above 50%\n\n\t// \t\t// Dragging downwards\n\t// \t\tif (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n\t// \t\t\treturn\n\t// \t\t}\n\n\t// \t\t// Dragging upwards\n\t// \t\tif (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n\t// \t\t\treturn\n\t// \t\t}\n\n\t// \t\t// Time to actually perform the action\n\t// \t\tmoveCard(dragIndex, hoverIndex)\n\n\t// \t\t// Note: we're mutating the monitor item here!\n\t// \t\t// Generally it's better to avoid mutations,\n\t// \t\t// but it's good here for the sake of performance\n\t// \t\t// to avoid expensive index searches.\n\t// \t\titem.index = hoverIndex\n\t// \t},\n    // }));\n    \n\n    const addImageToBoard = (id) => {\n        console.log(\"Dragging is over\"); // printed when isOver is true\n        const pictureList = picturesList.filter((picture) => id === picture.id); // find the dragged image\n        // picturesList = picturesList.filter((picture) => id !== picture.id);\n        setBoard((board) => [...board, pictureList[0]]); // add to the board\n    }\n\n    return (\n        <>\n            {/* <div className='Pictures' > \n    {PicturesList.map((picture) => {\n        return <Picture key={picture.id} id={picture.id} url={picture.url}/>;\n    })} </div> */}\n    {/* ref={drop} */}\n            <div className='Board' style={{ border: '2px solid black', height: '100vh', display: 'flex', flexDirection: 'column'}}>\n                {/* , color: isOver  */}\n                {console.log(board)}\n                {board.map((picture, index) => {\n                    return <Picture \n                    key={picture.id} \n                    id={picture.id} \n                    url={picture.url} \n                    index={index}\n                    moveImage = {moveImage}\n                    // ref={ref}\n                    />;\n                })}\n            </div>\n        </>\n    )\n}\n\nexport default DragDrop;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AAC5D,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,OAAO,QAAQ,WAAW;AAAC;AAAA;AAGpC,IAAIC,YAAY,GAAG,CACf;EACIC,EAAE,EAAE,CAAC;EACLC,GAAG,EAAE;AACT,CAAC,EACD;EACID,EAAE,EAAE,CAAC;EACLC,GAAG,EAAE;AACT,CAAC,EACD;EACID,EAAE,EAAE,CAAC;EACLC,GAAG,EAAE;AACT,CAAC,CACJ;AACD,SAASC,QAAQ,GAAG;EAAA;EAEhB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACK,YAAY,CAAC,CAAC,CAAC;EAClD,MAAMM,SAAS,GAAGT,WAAW,CAAC,CAACU,SAAS,EAAEC,UAAU,KAAK;IACrDH,QAAQ,CAAEI,SAAS,IAAK;MACpB;MACCC,OAAO,CAACC,GAAG,CAACJ,SAAS,EAAEC,UAAU,EAAEC,SAAS,CAAC;MAC7C,OAAOA,SAAS;IACrB;IACI;IACA;IACA;IACA;IACA;IACA;IAAA,CACH;EACL,CAAC,EAAE,EAAE,CAAC;EACN;EACA;EACA;EACA;EACA;EACA;EACA;EACH;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACG;;EAGA,MAAMG,eAAe,GAAIX,EAAE,IAAK;IAC5BS,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACjC,MAAME,WAAW,GAAGb,YAAY,CAACc,MAAM,CAAEC,OAAO,IAAKd,EAAE,KAAKc,OAAO,CAACd,EAAE,CAAC,CAAC,CAAC;IACzE;IACAI,QAAQ,CAAED,KAAK,IAAK,CAAC,GAAGA,KAAK,EAAES,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,CAAC;;EAED,oBACI;IAAA,uBAMI;MAAK,SAAS,EAAC,OAAO;MAAC,KAAK,EAAE;QAAEG,MAAM,EAAE,iBAAiB;QAAEC,MAAM,EAAE,OAAO;QAAEC,OAAO,EAAE,MAAM;QAAEC,aAAa,EAAE;MAAQ,CAAE;MAAA,WAEjHT,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC,EAClBA,KAAK,CAACgB,GAAG,CAAC,CAACL,OAAO,EAAEM,KAAK,KAAK;QAC3B,oBAAO,QAAC,OAAO;UAEf,EAAE,EAAEN,OAAO,CAACd,EAAG;UACf,GAAG,EAAEc,OAAO,CAACb,GAAI;UACjB,KAAK,EAAEmB,KAAM;UACb,SAAS,EAAIf;UACb;QAAA,GALKS,OAAO,CAACd,EAAE;UAAA;UAAA;UAAA;QAAA,QAMb;MACN,CAAC,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA;EACA,iBACP;AAEX;AAAC,GAxGQE,QAAQ;AAAA,KAARA,QAAQ;AA0GjB,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}